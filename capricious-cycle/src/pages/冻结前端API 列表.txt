# 冻结前端 API 列表

以下为前端各页面与构建流程所需的最小可用接口，所有路由均已版本化为 /api/v1 前缀并冻结契约。

> **备注**：用户认证与会话管理通过 Supabase Auth 模块处理，前端可直接调用 Supabase SDK，无需额外自建认证接口。

接口路径                         | 方法   | 描述
--------------------------------|--------|--------------------------------------------
GET    /api/v1/categories        | GET    | 获取课程分类列表
GET    /api/v1/content-slugs     | GET    | 获取所有课程 slug 列表
GET    /api/v1/courses           | GET    | 获取课程元数据列表
GET    /api/v1/courses/:slug     | GET    | 获取单个课程详情
GET    /api/v1/content/:slug     | GET    | 获取运行时标准化内容 JSON
GET    /api/v1/progress          | GET    | 查询学习进度
POST   /api/v1/statement         | POST   | 写入 xAPI 学习语句
POST   /api/v1/create-order      | POST   | 创建一次性或订阅订单，返回支付链接
GET    /api/v1/orders/:orderId   | GET    | 查询订单状态（前端跳转后展示支付结果用）
GET    /api/v1/media/:filename   | GET    | 媒体资源代理或直链（可选）

> 注：如需增加搜索、多语言或用户偏好功能，可在后续迭代中补充接口。


初版方案

初版方案（五条核心接口）：

1. 列出所有课程 Slug  
   - 路径：GET /api/v1/content-slugs  
   - 响应示例：  
     ```json
     [
       "course-slug-1",
       "course-slug-2",
       "course-slug-3"
     ]
     ```

2. 获取课程列表  
   - 路径：GET /api/v1/courses  
   - 可选查询：`?category=基础篇&search=语法`  
   - 响应示例：  
     ```json
     [
       {
         "id": "uuid-1",
         "title": "课程一标题",
         "slug": "course-slug-1",
         "category": "基础篇",
         "updatedAt": "2025-07-04T08:00:00Z"
       },
       {
         "id": "uuid-2",
         "title": "课程二标题",
         "slug": "course-slug-2",
         "category": "进阶篇",
         "updatedAt": "2025-07-04T09:30:00Z"
       }
     ]
     ```

3. 获取单个课程详情  
   - 路径：GET /api/v1/courses/:slug  
   - 响应示例：  
     ```json
     {
       "id": "uuid-1",
       "title": "课程一标题",
       "slug": "course-slug-1",
       "category": "基础篇",
       "updatedAt": "2025-07-04T08:00:00Z",
       "media": [
         "https://…/video.mp4",
         "https://…/image.png"
       ],
       "content": { /* 标准化 JSON 结构 */ }
     }
     ```

4. 提交学习行为  
   - 路径：POST /api/v1/statement  
   - 请求体示例：  
     ```json
     {
       "actor": "user-id",
       "verb": "viewed",
       "object": "course-slug-1",
       "timestamp": "2025-07-04T12:10:00Z"
     }
     ```  
   - 响应示例：  
     ```json
     {
       "status": "ok",
       "id": "statement-uuid"
     }
     ```

5. 查询学习进度  
   - 路径：GET /api/v1/progress?actor=user-id  
   - 响应示例：  
     ```json
     {
       "progress": [
         { "courseId": "course-slug-1", "interactions": 5 },
         { "courseId": "course-slug-2", "interactions": 2 }
       ]
     }
     ```

> **资源命名更新**：支付创建接口已调整为 `POST /api/v1/orders`，与 `GET /api/v1/orders/:orderId` 保持一致。

OpenAPI 3.0 完整规范示例。

openapi: 3.0.3
info:
  title: 藏语学习网站 API
  version: "1.0.0"
  description: |
    本文档定义了藏语学习网站的核心业务接口，均以 `/api/v1` 为前缀，使用 Cloudflare Workers + D1 + KV + R2 + Supabase Auth 技术栈。
servers:
  - url: https://api.example.com/api/v1
    description: 生产环境
  - url: https://staging-api.example.com/api/v1
    description: 预览环境

paths:
  /content-slugs:
    get:
      summary: 列出所有课程 Slug
      tags:
        - Course
      responses:
        '200':
          description: Slug 列表
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: course-slug-1

  /courses:
    get:
      summary: 获取课程列表
      tags:
        - Course
      parameters:
        - name: category
          in: query
          description: 按分类过滤
          schema:
            type: string
          example: 基础篇
        - name: search
          in: query
          description: 按标题或描述搜索
          schema:
            type: string
          example: 语法
      responses:
        '200':
          description: 课程列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseSummary'

  /courses/{slug}:
    get:
      summary: 获取单个课程详情
      tags:
        - Course
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: 课程唯一标识
      responses:
        '200':
          description: 课程详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /statement:
    post:
      summary: 提交学习行为（xAPI 语句）
      tags:
        - Learning
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatementInput'
      responses:
        '201':
          description: 写入成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  id:
                    type: string
                    example: statement-uuid
        '400':
          $ref: '#/components/responses/BadRequest'

  /progress:
    get:
      summary: 查询学习进度
      tags:
        - Learning
      parameters:
        - name: actor
          in: query
          required: true
          schema:
            type: string
          description: 用户唯一标识
      responses:
        '200':
          description: 进度信息
          content:
            application/json:
              schema:
                type: object
                properties:
                  progress:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProgressItem'
        '400':
          $ref: '#/components/responses/BadRequest'

  /orders:
    post:
      summary: 创建支付订单
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  example: course-slug-1
                type:
                  type: string
                  enum: [one_time, subscription]
                  example: one_time
      responses:
        '200':
          description: 订单创建
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                    example: order-uuid
                  paymentLink:
                    type: string
                    example: https://checkout.stripe.com/pay/cs_test_XXX
        '400':
          $ref: '#/components/responses/BadRequest'

  /orders/{orderId}:
    get:
      summary: 查询订单状态
      tags:
        - Payment
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: 订单唯一标识
      responses:
        '200':
          description: 订单状态
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                  status:
                    type: string
                    enum: [pending, paid, failed]
                  amount:
                    type: number
                example:
                  orderId: order-uuid
                  status: paid
                  amount: 99.00
        '404':
          $ref: '#/components/responses/NotFound'

  /media/{filename}:
    get:
      summary: 媒体资源直链或代理
      tags:
        - Media
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: 文件名（含扩展名）
      responses:
        '302':
          description: 重定向到 R2 签名 URL
          headers:
            Location:
              description: R2 签名下载地址
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    CourseSummary:
      type: object
      properties:
        id:
          type: string
          example: uuid-1
        title:
          type: string
          example: 课程一标题
        slug:
          type: string
          example: course-slug-1
        category:
          type: string
          example: 基础篇
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-04T08:00:00Z"

    CourseDetail:
      allOf:
        - $ref: '#/components/schemas/CourseSummary'
        - type: object
          properties:
            media:
              type: array
              items:
                type: string
                format: uri
                example: https://…/video.mp4
            content:
              type: object
              description: 前端所需的标准化 JSON 结构

    StatementInput:
      type: object
      required:
        - actor
        - verb
        - object
      properties:
        actor:
          type: string
          example: user-id
        verb:
          type: string
          example: viewed
        object:
          type: string
          example: course-slug-1
        timestamp:
          type: string
          format: date-time
          example: "2025-07-04T12:10:00Z"

    ProgressItem:
      type: object
      properties:
        courseId:
          type: string
          example: course-slug-1
        interactions:
          type: integer
          example: 5

  responses:
    BadRequest:
      description: 参数错误
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: InvalidParameter
                  message:
                    type: string
                    example: "Missing required field `slug`"
    NotFound:
      description: 资源未找到
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: NotFound
                  message:
                    type: string
                    example: "Resource not found"

# 数据模型与存储设计

以下为基于 Cloudflare D1、KV 与 R2 的数据模型说明与缓存策略，提供给前后端和运维团队参考。

## 一、ER 图与表结构

```mermaid
erDiagram
    COURSES {
        TEXT   id PK
        TEXT   title
        TEXT   slug UNIQUE
        TEXT   category
        DATETIME updated_at
        TEXT   content_json
    }
    STATEMENTS {
        TEXT   id PK
        TEXT   actor
        TEXT   verb
        TEXT   object
        DATETIME timestamp
    }
    ORDERS {
        TEXT   id PK
        TEXT   product_id
        TEXT   type
        TEXT   status
        REAL   amount
        DATETIME created_at
        DATETIME updated_at
    }
    MEDIA_FILES {
        TEXT   filename PK
        TEXT   r2_key
        DATETIME uploaded_at
    }

    COURSES ||--o{ STATEMENTS : "被学习打点"
    COURSES ||--o{ ORDERS : "可订购"
```

## 二、D1 表结构

### 1. `courses` 表

| 列名          | 类型       | 约束        | 说明                           |
|---------------|------------|-------------|--------------------------------|
| `id`          | TEXT       | PRIMARY KEY | UUID，课程唯一标识              |
| `title`       | TEXT       | NOT NULL    | 课程标题                       |
| `slug`        | TEXT       | UNIQUE      | 路由标识                       |
| `category`    | TEXT       |             | 课程分类                       |
| `content_json`| TEXT       | NOT NULL    | 标准化 JSON 内容               |
| `updated_at`  | DATETIME   | NOT NULL    | 最后更新时间                   |

### 2. `statements` 表

| 列名        | 类型     | 约束         | 说明                        |
|-------------|----------|--------------|-----------------------------|
| `id`        | TEXT     | PRIMARY KEY  | UUID，语句唯一标识          |
| `actor`     | TEXT     | NOT NULL     | 用户 ID                     |
| `verb`      | TEXT     | NOT NULL     | 行为动词                   |
| `object`    | TEXT     | NOT NULL     | 对象 ID（课程 slug）        |
| `timestamp` | DATETIME | NOT NULL     | 事件时间                    |

### 3. `orders` 表

| 列名         | 类型     | 约束         | 说明                              |
|--------------|----------|--------------|-----------------------------------|
| `id`         | TEXT     | PRIMARY KEY  | UUID，订单唯一标识                 |
| `product_id` | TEXT     | NOT NULL     | 对应 `courses.slug`               |
| `type`       | TEXT     | NOT NULL     | one_time 或 subscription           |
| `status`     | TEXT     | NOT NULL     | pending、paid、failed             |
| `amount`     | REAL     |              | 实付金额                           |
| `created_at` | DATETIME | NOT NULL     | 创建时间                           |
| `updated_at` | DATETIME | NOT NULL     | 最后变更时间                       |

### 4. `media_files` 表（可选）

| 列名         | 类型       | 约束        | 说明                  |
|--------------|------------|-------------|-----------------------|
| `filename`   | TEXT       | PRIMARY KEY | R2 对象名             |
| `r2_key`     | TEXT       | NOT NULL    | R2 存储键             |
| `uploaded_at`| DATETIME   | NOT NULL    | 上传时间              |

## 三、KV 缓存策略

| 键                          | 值类型         | 说明                                       | TTL     |
|-----------------------------|----------------|--------------------------------------------|---------|
| `content-slugs`             | JSON array     | 课程 slug 列表，用于静态生成                | 86400s  |
| `courses:list?{query}`      | JSON array     | 按分类/搜索缓存课程列表                     | 300s    |
| `courses:detail:{slug}`     | JSON object    | 单课程详情缓存                              | 300s    |
| `progress:{actor}`          | JSON object    | 用户学习进度聚合结果                        | 60s     |
| `orders:{orderId}`          | JSON object    | 订单状态查询缓存                            | 60s     |

> **说明**：接口优先读取 KV，未命中时查询 D1 并回写 KV；响应中设置 `Cache-Control` 头，配合 CDN 缓存。
# 3. 错误码与异常处理约定（初版）

## 统一错误响应格式

所有接口在发生错误时，应返回 HTTP 状态码对应的错误，并携带统一的 JSON 格式：

```json
{
  "error": {
    "code": "ErrorCode",
    "message": "Human-readable error message"
  }
}
```

- `code`：枚举型错误码，标识错误类型（大写驼峰或全大写，下同）。  
- `message`：面向前端的可读错误描述，可直接展示或日志记录。

## 常见错误码定义

| HTTP 状态码 | 错误码              | 场景说明                                         |
|------------|---------------------|--------------------------------------------------|
| 400        | InvalidParameter    | 参数缺失或格式不正确，例如缺少必填字段 `slug`      |
| 401        | Unauthorized        | 认证失败，缺少或无效的 Supabase JWT              |
| 403        | Forbidden           | 权限不足，用户无权访问或操作该资源               |
| 404        | NotFound            | 资源不存在，例如课程 `slug` 未找到                |
| 429        | RateLimitExceeded   | 触发速率限制，请求过于频繁                       |
| 500        | InternalError       | 服务端异常，捕获未处理的异常或数据库错误         |

## 幂等性与重试策略

- **写入接口**（POST `/statement`、POST `/orders`）应利用客户端生成的唯一 `id`（如 UUID）进行幂等写入：
  - 当发现相同 `id` 的记录已存在时，返回 200 或 201 且不重复写入。  
- **重试建议**：前端在遇到 5xx 错误时，可进行 1–2 次指数退避重试；对 4xx 错误不重试。

## 异常捕获与日志

- 在 Cloudflare Worker 中使用 `try...catch` 包裹业务逻辑：
  - 捕获已知业务错误并按上述格式返回；  
  - 捕获未知异常时，记录到 Sentry，并返回 500 + `{ code: "InternalError", message: "服务异常，请稍后重试" }`。