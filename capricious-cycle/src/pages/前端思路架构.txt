# 藏语学习网站前端架构与开发思路

## 一、整体前端架构方案
- **前端框架**：Astro
- **样式框架**：Tailwind CSS
- **内容来源**：Notion API
- **用户认证**：Supabase Auth
- **学习进度数据存储**：Cloudflare Workers + Cloudflare D1
- **部署环境**：Cloudflare Pages

## 二、核心开发工具链
- **设计工具**：Figma
- **快速原型绘制**：Excalidraw
- **内容管理与协作**：Notion
- **组件库**：Flowbite（Tailwind组件）
- **动画与交互效果**：AOS（Animate On Scroll）+ Astro Animations
- **图标库**：Lucide Icons
- **状态管理**：Astro Islands + 少量JS代码
- **响应式布局**：Tailwind CSS内置响应式类
- **API接口调试工具**：Hoppscotch.io / Postman
- **持续集成部署**：GitHub Actions + Wrangler



## 五、具体实施步骤

按照以上架构方案与工具链，我们的前端开发需遵循以下步骤：

1. **页面结构明确**
   - 使用Excalidraw快速绘制各页面结构草图
   - 在Notion文档中明确记录页面的功能模块需求

2. **设计规范与样式系统构建**
   - 使用Figma定义统一的视觉设计规范（色彩、字体、按钮、卡片等）
   - 将设计规范转换为Tailwind CSS的配置文件

3. **组件模块开发**
   - 根据页面需求，使用Flowbite组件快速构建基础组件
   - 创建Astro组件模板，实现组件的模块化和复用

4. **数据与后端联动**
   - 使用Notion官方API快速拉取课程内容
   - 利用Supabase官方SDK实现用户认证功能
   - 接入Cloudflare Workers与D1进行学习进度的数据记录与查询

5. **动效与交互功能添加**
   - 使用AOS快速实现页面滚动动画
   - 添加按钮hover动效、页面切换过渡效果，增强交互体验

6. **状态管理集成**
   - 使用Astro Islands快速实现加载状态、错误提示及用户认证状态管理

7. **响应式布局实现**
   - 使用Tailwind CSS内置响应式类名，实现移动端、平板与桌面的自适应布局

8. **构建部署与持续集成**
   - 配置GitHub Actions自动化部署流程
   - 使用Wrangler工具确保项目与Cloudflare Pages的高效部署与维护

以上步骤形成了明确的前端开发执行路径，有效提升开发效率与质量。


---

## 六、项目角色与职责划分

### 用户（你）在项目中的角色：
- **产品主理人**：主导内容规划、结构设计、用户体验与审美风格。
- **前端决策者**：确认各页面布局与功能结构，主导视觉与交互风格。
- **协同开发者**：必要时参与组件结构与页面逻辑构建。

### 我的角色（AI助手）：
- **架构与技术顾问**：提供前端框架、数据联动、页面结构等技术建议。
- **代码协作生成器**：按你的要求生成 `.astro` 页面、组件代码、样式结构等。
- **流程监理与规范输出者**：负责开发步骤规划、流程控制、规范约束输出。

---

## 七、推荐模板与预制方案（可参考，不强依赖）

| 模板名称 | 适用情况 | 特点 |
|----------|-----------|------|
| **Astroship** | 商业/内容平台类网站 | 动画丰富，组件成熟，结构清晰 |
| **AstroWind** | 教育/内容类项目 | 布局大气，交互完善，适合快速上线 |
| **Astro Boilerplate** | 轻量级起步项目 | 集成 Markdown 与内容管理逻辑，适合 Notion 内容同步 |

建议：作为参考或借用部分组件和结构，**不直接依赖整套模板**，以保证自定义自由度。

---

## 八、八项核心开发任务细化说明（完整版）

1. **页面结构规划**
   - 定义每个页面的路径、功能区块、跳转逻辑。
   - 示例：`/courses` 页面包含课程列表区 + 分类入口 + 动态跳转链接。

2. **样式与设计系统**
   - 在 Figma 中统一定义颜色系统、字体、按钮样式、间距比例。
   - 同步为 Tailwind 配置 `tailwind.config.js` 的主题拓展。

3. **组件模块开发**
   - 将每个功能分解为组件：如 `<CourseCard />`, `<ProgressBar />`, `<HeroSection />`。
   - 所有组件存于 `/src/components/` 目录中，命名规范、功能独立。

4. **动效与交互系统**
   - 页面滚动进入动画（AOS）
   - 悬停反馈（Tailwind 的 `hover:`, `transition`, `group-hover:`）
   - 页面切换动效（`astro:transition`）

5. **与后端 API 联动**
   - 课程：通过 Notion API 拉取
   - 用户：通过 Supabase 登录、注册、鉴权
   - 学习记录：写入 Cloudflare D1 数据库（标准化 xAPI 格式）

6. **状态管理机制**
   - 使用 Astro Islands + 自定义 JS 控制登录状态、加载提示、错误处理
   - 状态存储：可使用 localStorage / cookie / session / API刷新

7. **响应式布局与适配**
   - 使用 Tailwind 的断点（如 `sm:` `md:` `lg:`）实现桌面与移动端适配
   - 每个组件都应具备移动优先视角

8. **构建部署与资源优化**
   - 使用 GitHub Actions + wrangler 自动部署到 Cloudflare Pages
   - 构建中压缩图片、剔除未用 Tailwind class，自动产出 sitemap 与 meta 信息

---

## 九、前端构建执行步骤（项目流程图）

1. ✅ 明确页面结构（已完成）
2. ⏳ 规划整体架构、工具链与职责分工（已完成）
3. ⏳ 写入页面结构文档与开发规范（进行中）
4. ⏳ 开始逐页面生成 `.astro` 页面文件（待执行）
5. ⏳ 页面组件开发（HeroSection, CourseCard 等）
6. ⏳ 样式系统接入（Figma 定稿 + Tailwind 实现）
7. ⏳ 数据绑定与 API 联动逻辑编写（Notion、Supabase、D1）
8. ⏳ 动效系统集成（AOS、transition 等）
9. ⏳ 全站布局适配（响应式处理）
10. ⏳ 构建上线与测试（部署、Sentry、性能优化）

---

此补充完成后，即形成一个全面、详细、可执行的前端开发文档蓝本。
